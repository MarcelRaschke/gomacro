// this file was generated by gomacro command: import _b "io/fs"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	fs "io/fs"
	time "time"
)

// reflection: allow interpreted code to import "io/fs"
func init() {
	Packages["io/fs"] = Package{
		Name: "fs",
		Binds: map[string]Value{
			"ErrClosed":	ValueOf(&fs.ErrClosed).Elem(),
			"ErrExist":	ValueOf(&fs.ErrExist).Elem(),
			"ErrInvalid":	ValueOf(&fs.ErrInvalid).Elem(),
			"ErrNotExist":	ValueOf(&fs.ErrNotExist).Elem(),
			"ErrPermission":	ValueOf(&fs.ErrPermission).Elem(),
			"FileInfoToDirEntry":	ValueOf(fs.FileInfoToDirEntry),
			"Glob":	ValueOf(fs.Glob),
			"ModeAppend":	ValueOf(fs.ModeAppend),
			"ModeCharDevice":	ValueOf(fs.ModeCharDevice),
			"ModeDevice":	ValueOf(fs.ModeDevice),
			"ModeDir":	ValueOf(fs.ModeDir),
			"ModeExclusive":	ValueOf(fs.ModeExclusive),
			"ModeIrregular":	ValueOf(fs.ModeIrregular),
			"ModeNamedPipe":	ValueOf(fs.ModeNamedPipe),
			"ModePerm":	ValueOf(fs.ModePerm),
			"ModeSetgid":	ValueOf(fs.ModeSetgid),
			"ModeSetuid":	ValueOf(fs.ModeSetuid),
			"ModeSocket":	ValueOf(fs.ModeSocket),
			"ModeSticky":	ValueOf(fs.ModeSticky),
			"ModeSymlink":	ValueOf(fs.ModeSymlink),
			"ModeTemporary":	ValueOf(fs.ModeTemporary),
			"ModeType":	ValueOf(fs.ModeType),
			"ReadDir":	ValueOf(fs.ReadDir),
			"ReadFile":	ValueOf(fs.ReadFile),
			"SkipDir":	ValueOf(&fs.SkipDir).Elem(),
			"Stat":	ValueOf(fs.Stat),
			"Sub":	ValueOf(fs.Sub),
			"ValidPath":	ValueOf(fs.ValidPath),
			"WalkDir":	ValueOf(fs.WalkDir),
		}, Types: map[string]Type{
			"DirEntry":	TypeOf((*fs.DirEntry)(nil)).Elem(),
			"FS":	TypeOf((*fs.FS)(nil)).Elem(),
			"File":	TypeOf((*fs.File)(nil)).Elem(),
			"FileInfo":	TypeOf((*fs.FileInfo)(nil)).Elem(),
			"FileMode":	TypeOf((*fs.FileMode)(nil)).Elem(),
			"GlobFS":	TypeOf((*fs.GlobFS)(nil)).Elem(),
			"PathError":	TypeOf((*fs.PathError)(nil)).Elem(),
			"ReadDirFS":	TypeOf((*fs.ReadDirFS)(nil)).Elem(),
			"ReadDirFile":	TypeOf((*fs.ReadDirFile)(nil)).Elem(),
			"ReadFileFS":	TypeOf((*fs.ReadFileFS)(nil)).Elem(),
			"StatFS":	TypeOf((*fs.StatFS)(nil)).Elem(),
			"SubFS":	TypeOf((*fs.SubFS)(nil)).Elem(),
			"WalkDirFunc":	TypeOf((*fs.WalkDirFunc)(nil)).Elem(),
		}, Proxies: map[string]Type{
			"DirEntry":	TypeOf((*P_io_fs_DirEntry)(nil)).Elem(),
			"FS":	TypeOf((*P_io_fs_FS)(nil)).Elem(),
			"File":	TypeOf((*P_io_fs_File)(nil)).Elem(),
			"FileInfo":	TypeOf((*P_io_fs_FileInfo)(nil)).Elem(),
			"GlobFS":	TypeOf((*P_io_fs_GlobFS)(nil)).Elem(),
			"ReadDirFS":	TypeOf((*P_io_fs_ReadDirFS)(nil)).Elem(),
			"ReadDirFile":	TypeOf((*P_io_fs_ReadDirFile)(nil)).Elem(),
			"ReadFileFS":	TypeOf((*P_io_fs_ReadFileFS)(nil)).Elem(),
			"StatFS":	TypeOf((*P_io_fs_StatFS)(nil)).Elem(),
			"SubFS":	TypeOf((*P_io_fs_SubFS)(nil)).Elem(),
		}, 
	}
}

// --------------- proxy for io/fs.DirEntry ---------------
type P_io_fs_DirEntry struct {
	Object	interface{}
	Info_	func(interface{}) (fs.FileInfo, error)
	IsDir_	func(interface{}) bool
	Name_	func(interface{}) string
	Type_	func(interface{}) fs.FileMode
}
func (P *P_io_fs_DirEntry) Info() (fs.FileInfo, error) {
	return P.Info_(P.Object)
}
func (P *P_io_fs_DirEntry) IsDir() bool {
	return P.IsDir_(P.Object)
}
func (P *P_io_fs_DirEntry) Name() string {
	return P.Name_(P.Object)
}
func (P *P_io_fs_DirEntry) Type() fs.FileMode {
	return P.Type_(P.Object)
}

// --------------- proxy for io/fs.FS ---------------
type P_io_fs_FS struct {
	Object	interface{}
	Open_	func(_proxy_obj_ interface{}, name string) (fs.File, error)
}
func (P *P_io_fs_FS) Open(name string) (fs.File, error) {
	return P.Open_(P.Object, name)
}

// --------------- proxy for io/fs.File ---------------
type P_io_fs_File struct {
	Object	interface{}
	Close_	func(interface{}) error
	Read_	func(interface{}, []byte) (int, error)
	Stat_	func(interface{}) (fs.FileInfo, error)
}
func (P *P_io_fs_File) Close() error {
	return P.Close_(P.Object)
}
func (P *P_io_fs_File) Read(unnamed0 []byte) (int, error) {
	return P.Read_(P.Object, unnamed0)
}
func (P *P_io_fs_File) Stat() (fs.FileInfo, error) {
	return P.Stat_(P.Object)
}

// --------------- proxy for io/fs.FileInfo ---------------
type P_io_fs_FileInfo struct {
	Object	interface{}
	IsDir_	func(interface{}) bool
	ModTime_	func(interface{}) time.Time
	Mode_	func(interface{}) fs.FileMode
	Name_	func(interface{}) string
	Size_	func(interface{}) int64
	Sys_	func(interface{}) any
}
func (P *P_io_fs_FileInfo) IsDir() bool {
	return P.IsDir_(P.Object)
}
func (P *P_io_fs_FileInfo) ModTime() time.Time {
	return P.ModTime_(P.Object)
}
func (P *P_io_fs_FileInfo) Mode() fs.FileMode {
	return P.Mode_(P.Object)
}
func (P *P_io_fs_FileInfo) Name() string {
	return P.Name_(P.Object)
}
func (P *P_io_fs_FileInfo) Size() int64 {
	return P.Size_(P.Object)
}
func (P *P_io_fs_FileInfo) Sys() any {
	return P.Sys_(P.Object)
}

// --------------- proxy for io/fs.GlobFS ---------------
type P_io_fs_GlobFS struct {
	Object	interface{}
	Glob_	func(_proxy_obj_ interface{}, pattern string) ([]string, error)
	Open_	func(_proxy_obj_ interface{}, name string) (fs.File, error)
}
func (P *P_io_fs_GlobFS) Glob(pattern string) ([]string, error) {
	return P.Glob_(P.Object, pattern)
}
func (P *P_io_fs_GlobFS) Open(name string) (fs.File, error) {
	return P.Open_(P.Object, name)
}

// --------------- proxy for io/fs.ReadDirFS ---------------
type P_io_fs_ReadDirFS struct {
	Object	interface{}
	Open_	func(_proxy_obj_ interface{}, name string) (fs.File, error)
	ReadDir_	func(_proxy_obj_ interface{}, name string) ([]fs.DirEntry, error)
}
func (P *P_io_fs_ReadDirFS) Open(name string) (fs.File, error) {
	return P.Open_(P.Object, name)
}
func (P *P_io_fs_ReadDirFS) ReadDir(name string) ([]fs.DirEntry, error) {
	return P.ReadDir_(P.Object, name)
}

// --------------- proxy for io/fs.ReadDirFile ---------------
type P_io_fs_ReadDirFile struct {
	Object	interface{}
	Close_	func(interface{}) error
	Read_	func(interface{}, []byte) (int, error)
	ReadDir_	func(_proxy_obj_ interface{}, n int) ([]fs.DirEntry, error)
	Stat_	func(interface{}) (fs.FileInfo, error)
}
func (P *P_io_fs_ReadDirFile) Close() error {
	return P.Close_(P.Object)
}
func (P *P_io_fs_ReadDirFile) Read(unnamed0 []byte) (int, error) {
	return P.Read_(P.Object, unnamed0)
}
func (P *P_io_fs_ReadDirFile) ReadDir(n int) ([]fs.DirEntry, error) {
	return P.ReadDir_(P.Object, n)
}
func (P *P_io_fs_ReadDirFile) Stat() (fs.FileInfo, error) {
	return P.Stat_(P.Object)
}

// --------------- proxy for io/fs.ReadFileFS ---------------
type P_io_fs_ReadFileFS struct {
	Object	interface{}
	Open_	func(_proxy_obj_ interface{}, name string) (fs.File, error)
	ReadFile_	func(_proxy_obj_ interface{}, name string) ([]byte, error)
}
func (P *P_io_fs_ReadFileFS) Open(name string) (fs.File, error) {
	return P.Open_(P.Object, name)
}
func (P *P_io_fs_ReadFileFS) ReadFile(name string) ([]byte, error) {
	return P.ReadFile_(P.Object, name)
}

// --------------- proxy for io/fs.StatFS ---------------
type P_io_fs_StatFS struct {
	Object	interface{}
	Open_	func(_proxy_obj_ interface{}, name string) (fs.File, error)
	Stat_	func(_proxy_obj_ interface{}, name string) (fs.FileInfo, error)
}
func (P *P_io_fs_StatFS) Open(name string) (fs.File, error) {
	return P.Open_(P.Object, name)
}
func (P *P_io_fs_StatFS) Stat(name string) (fs.FileInfo, error) {
	return P.Stat_(P.Object, name)
}

// --------------- proxy for io/fs.SubFS ---------------
type P_io_fs_SubFS struct {
	Object	interface{}
	Open_	func(_proxy_obj_ interface{}, name string) (fs.File, error)
	Sub_	func(_proxy_obj_ interface{}, dir string) (fs.FS, error)
}
func (P *P_io_fs_SubFS) Open(name string) (fs.File, error) {
	return P.Open_(P.Object, name)
}
func (P *P_io_fs_SubFS) Sub(dir string) (fs.FS, error) {
	return P.Sub_(P.Object, dir)
}
