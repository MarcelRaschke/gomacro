// this file was generated by gomacro command: import _b "image/draw"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	image "image"
	color "image/color"
	draw "image/draw"
)

// reflection: allow interpreted code to import "image/draw"
func init() {
	Packages["image/draw"] = Package{
		Name: "draw",
		Binds: map[string]Value{
			"Draw":	ValueOf(draw.Draw),
			"DrawMask":	ValueOf(draw.DrawMask),
			"FloydSteinberg":	ValueOf(&draw.FloydSteinberg).Elem(),
			"Over":	ValueOf(draw.Over),
			"Src":	ValueOf(draw.Src),
		}, Types: map[string]Type{
			"Drawer":	TypeOf((*draw.Drawer)(nil)).Elem(),
			"Image":	TypeOf((*draw.Image)(nil)).Elem(),
			"Op":	TypeOf((*draw.Op)(nil)).Elem(),
			"Quantizer":	TypeOf((*draw.Quantizer)(nil)).Elem(),
			"RGBA64Image":	TypeOf((*draw.RGBA64Image)(nil)).Elem(),
		}, Proxies: map[string]Type{
			"Drawer":	TypeOf((*P_image_draw_Drawer)(nil)).Elem(),
			"Image":	TypeOf((*P_image_draw_Image)(nil)).Elem(),
			"Quantizer":	TypeOf((*P_image_draw_Quantizer)(nil)).Elem(),
			"RGBA64Image":	TypeOf((*P_image_draw_RGBA64Image)(nil)).Elem(),
		}, 
	}
}

// --------------- proxy for image/draw.Drawer ---------------
type P_image_draw_Drawer struct {
	Object	interface{}
	Draw_	func(_proxy_obj_ interface{}, dst draw.Image, r image.Rectangle, src image.Image, sp image.Point) 
}
func (P *P_image_draw_Drawer) Draw(dst draw.Image, r image.Rectangle, src image.Image, sp image.Point)  {
	P.Draw_(P.Object, dst, r, src, sp)
}

// --------------- proxy for image/draw.Image ---------------
type P_image_draw_Image struct {
	Object	interface{}
	At_	func(_proxy_obj_ interface{}, x int, y int) color.Color
	Bounds_	func(interface{}) image.Rectangle
	ColorModel_	func(interface{}) color.Model
	Set_	func(_proxy_obj_ interface{}, x int, y int, c color.Color) 
}
func (P *P_image_draw_Image) At(x int, y int) color.Color {
	return P.At_(P.Object, x, y)
}
func (P *P_image_draw_Image) Bounds() image.Rectangle {
	return P.Bounds_(P.Object)
}
func (P *P_image_draw_Image) ColorModel() color.Model {
	return P.ColorModel_(P.Object)
}
func (P *P_image_draw_Image) Set(x int, y int, c color.Color)  {
	P.Set_(P.Object, x, y, c)
}

// --------------- proxy for image/draw.Quantizer ---------------
type P_image_draw_Quantizer struct {
	Object	interface{}
	Quantize_	func(_proxy_obj_ interface{}, p color.Palette, m image.Image) color.Palette
}
func (P *P_image_draw_Quantizer) Quantize(p color.Palette, m image.Image) color.Palette {
	return P.Quantize_(P.Object, p, m)
}

// --------------- proxy for image/draw.RGBA64Image ---------------
type P_image_draw_RGBA64Image struct {
	Object	interface{}
	At_	func(_proxy_obj_ interface{}, x int, y int) color.Color
	Bounds_	func(interface{}) image.Rectangle
	ColorModel_	func(interface{}) color.Model
	RGBA64At_	func(_proxy_obj_ interface{}, x int, y int) color.RGBA64
	Set_	func(_proxy_obj_ interface{}, x int, y int, c color.Color) 
	SetRGBA64_	func(_proxy_obj_ interface{}, x int, y int, c color.RGBA64) 
}
func (P *P_image_draw_RGBA64Image) At(x int, y int) color.Color {
	return P.At_(P.Object, x, y)
}
func (P *P_image_draw_RGBA64Image) Bounds() image.Rectangle {
	return P.Bounds_(P.Object)
}
func (P *P_image_draw_RGBA64Image) ColorModel() color.Model {
	return P.ColorModel_(P.Object)
}
func (P *P_image_draw_RGBA64Image) RGBA64At(x int, y int) color.RGBA64 {
	return P.RGBA64At_(P.Object, x, y)
}
func (P *P_image_draw_RGBA64Image) Set(x int, y int, c color.Color)  {
	P.Set_(P.Object, x, y, c)
}
func (P *P_image_draw_RGBA64Image) SetRGBA64(x int, y int, c color.RGBA64)  {
	P.SetRGBA64_(P.Object, x, y, c)
}
